apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Values.webapp.name }}-{{ randAlphaNum 5 | lower }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ .Values.webapp.name }}
    group: {{ .Values.webapp.group }}
spec:
  template:
    metadata:
      labels:
        app: {{ .Values.webapp.name }}
    spec:
      restartPolicy: Never
      volumes:
        - name: {{ .Values.webapp.volume1.name }}
          nfs:
            server: {{ .Values.webapp.volume1.server }}
            path: {{ .Values.webapp.volume1.path }}
            readOnly: {{ .Values.webapp.volume1.readOnly }}
        - name: {{ .Values.webapp.volume2.name }}
          persistentVolumeClaim:
            claimName: {{ .Values.webapp.volume2.name }}
      runtimeClassName: nvidia
      securityContext:
        fsGroup: 1000
      containers:
      - name: {{ .Values.webapp.name }}
        image: {{ .Values.webapp.container.image }}
        imagePullPolicy: {{ .Values.webapp.imagePullPolicy }}
        command: ["/bin/bash", "-c"]
        args:
          - |
            rm -rf /output/*
            pwd
            ls
            echo hijfkdls
            git clone -q https://github.com/NCAR/CIRRUS-MILES-CREDIT.git
            conda run -n credit python -m pip install -q -e .
            git pull -q
            git checkout djgagne
            cd applications
            echo "GFS INIT!!"
            pwd
            LD_LIBRARY_PATH=/opt/conda/envs/credit/lib:$LD_LIBRARY_PATH \
            conda run -n credit python gfs_init.py -c /workspace/miles-credit/CIRRUS-MILES-CREDIT/model_predict_old.yml
            echo "output1"
            ls -a /output
            conda run -n credit python -c "
            import sys, xarray as xr
            
            try:
                store = '/output/gfs_init_20250702_0000.zarr'
                ds = xr.open_zarr(store, consolidated=False)
                ds.to_zarr(store, consolidated=True, mode='a')
                xr.open_zarr(store, consolidated=True)  # Validation
                print('✅ .zmetadata written and valid')
            except Exception as e:
                print('❌ Failed to consolidate metadata:', e)
                sys.exit(1)
            "
            conda install -n credit cftime
            echo "output2"
            ls -a /output
            echo "output3"
            ls -a /output/gfs_init_20250702_0000.zarr
            ls -a /output
            find /output -name *zmetadata*
            cp /output/gfs_init_20250702_0000.zarr/.zmetadata /output
            mkdir -p /output/wxformer_1h_gfs
            echo "ROLLOUT REALTIME"
            conda run -n credit conda list zarr
            sed -i "488a\    print("save_loc " + save_loc)" rollout_realtime.py
            LD_LIBRARY_PATH=/opt/conda/envs/credit/lib:$LD_LIBRARY_PATH \
            conda run -n credit python rollout_realtime.py -c /workspace/miles-credit/CIRRUS-MILES-CREDIT/model_predict_old.yml
            ls -a /output/wxformer_1h_gfs
            #printf '{\n    "zarr_format": 2\n}\n' > /output/.zgroup
            #
            #
            #python applications/gfs_init.py
            #conda run -n credit python -c "import torch; print(\"CUDA available?\", torch.cuda.is_available())"
            #bash /usr/local/bin/gpu-test &&
            #ls /usr/local/bin/gpu-test &&
            
        #command: ["/bin/bash", "-c"]
        #args:
        #  - |
        #    echo foo;
#        command: ["/bin/bash", "-c"]
#        args:
#          - |
#            echo "Starting job...";
#            export TZ=MST;
#            RESULT=$(date);
#            echo "The current date is: $RESULT";
        #command: ["/bin/bash", "-c"]
        #args:
        #  - |
        #    ls;
        #    ls /usr/local/bin/gpu-test;
        #    /usr/local/bin/gpu-test;
        #args: ["-c", "/usr/local/bin/gpu-test"]
        tty: true
        resources:
          limits:
            memory: {{ .Values.webapp.container.limits.memory }}
            cpu: {{ .Values.webapp.container.limits.cpu }}
            nvidia.com/gpu: "1"
          requests:
            memory: {{ .Values.webapp.container.requests.memory }}
            cpu: {{ .Values.webapp.container.requests.cpu }}
            nvidia.com/gpu: "1"
        volumeMounts:
        - mountPath: /glade/campaign
          name: {{ .Values.webapp.volume1.name }}
        - mountPath: /output
          name: {{ .Values.webapp.volume2.name }}
